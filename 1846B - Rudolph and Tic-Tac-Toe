#include<bits/stdc++.h>
#include<string.h>
#define ll long long int
#define br <<"\n";
#define no "NO"
#define yes "YES"
#define vecint vector<int>
#define vecll vector<long long int>
#define vecstring vector<string>
#define push push_back
#define decimal(n) cout<<fixed<<setprecision(n);
#define For(i,n) for(int i=0;i<n;i++)
#define Forran(i,n,a) for(int i=n;i<a;i++)
#define Forrevran(i,n,a) for(int i=n-1;i>=a;i--)
#define Forrev(i,n) for(int i = n-1; i >= 0; i--)
#define fastio ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
using namespace std;
bool isprime(const ll n)
{
    if (n <= 1)
        return false;
    if (n <= 3)
        return true;
    if (n % 2 == 0 or n % 3 == 0)
        return false;
    for (ll i = 5; i * i <= n; i += 6)
        if (n % i == 0 or n % (i + 2) == 0)
            return false;
    return true;
}
int gcd(int a,int b)
{
    while(a!=0)
    {
        if(a<b)
            swap(a,b);
        a=a%b;
    }
    return b;
}
bool descending(int x, int y)
{
    return x > y;   // vector sorting use sort(v.begin(),v.end(),descending);
}
int main()
{
    fastio
    ll t,n,a,l,i,temp=0;
    string ra[3];
    cin>>t;
    while(t--)
    {
        temp=0;
        For(i,3)
        {
            cin>>ra[i];
        }
        For(i,3)
        {
            if(ra[i][0]==ra[i][1] && ra[i][1]==ra[i][2] && ra[i][0]!='.')
            {
                cout<<ra[i][0] br;
                temp++;
                break;
            }
            if(ra[0][i]==ra[1][i] && ra[1][i]==ra[2][i] && ra[0][i]!='.')
            {
                cout<<ra[0][i] br;
                temp++;
                break;
            }
        }
        if(temp==0 &&ra[0][0]==ra[1][1] && ra[1][1]==ra[2][2]&& ra[1][1]!='.')
        {
            cout<<ra[1][1] br;
            temp++;
        }
        if(temp==0 && ra[0][2]==ra[1][1] && ra[1][1]==ra[2][0] && ra[1][1]!='.')
        {
            cout<<ra[1][1] br;
            temp++;
        }
        if(temp==0)
        {
            cout<<"DRAW" br;
        }
    }
    return 0;
}
