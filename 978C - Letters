#include<bits/stdc++.h>
#include<string.h>
#define ll long long int
#define br <<"\n"
#define no "NO"
#define yes "YES"
#define vecint vector<int>
#define vecll vector<long long int>
#define vecstring vector<string>
#define push push_back
#define decimal(n) cout<<fixed<<setprecision(n);
#define For(i,n) for(int i=0;i<n;i++)
#define Forran(i,n,a) for(int i=n;i<a;i++)
#define Forrevran(i,n,a) for(int i=n-1;i>=a;i--)
#define Forrev(i,n) for(int i = n-1; i >= 0; i--)
#define total(v) accumulate(v.begin(),v.end(),0)
#define diff(ax,ay,bx,by) abs(ax-bx)+abs(ay-by)
#define oneinbin(x) __builtin_popcount(x)
#define distance(ax,ay,bx,by) pow((ax-bx)*(ax-bx)+(ay-by)*(ay-by),0.5)
#define fastio ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
using namespace std;
bool descending(int x, int y)
{
    return x > y;
}
bool compare(pair<ll,ll>&a,pair<ll,ll>&b)
{
    return (a.first>b.first) || (a.first==b.first && a.second<b.second);
}
bool vecfind(vector<ll>ra,ll x)
{
    if(find(ra.begin(),ra.end(),x)!=ra.end())
    {
        return true;
    }
    else
    {
        return false;
    }
}
ll Bsearch(vector<ll>& ra,ll n,ll k)
{
    ll ans,l=0,r=n-1,mid;
    while(l<=r)
    {
        mid=l+(r-l)/2;
        if(ra[mid]<k)
        {
            l=mid+1;
        }
        else
        {
            ans = mid;
            r=mid-1;
        }
    }
    return ans;
}
vecll primes;
const ll N = 100000000;
bool is_prime[N];
void sieve()
{
    for (ll i = 3; i * i <= N; i+=2)
    {
        if (is_prime[i]==0)
        {
            for (ll j = i * i; j <= N; j += 2*i)
                is_prime[j] = 1;
        }
    }
    primes.push(2);
    for(ll j = 3 ; j<=N ; j+=2)
    {
        if(is_prime[j]==0)
        {
            primes.push(j);
        }
    }
}
ll modInverse(ll A, ll M)
{
    for (ll X = 1; X < M; X++)
        if (((A % M) * (X % M)) % M == 1)
            return X;
    return 0;
}
ll crt(vector<ll>& a,vector<ll>& m)
{
    ll prod = 1;
    for (auto i:m)
        prod *= i;
    ll result = 0;
    for (ll i = 0; i < m.size(); i++)
    {
        ll pp = prod / m[i];
        result += a[i] * modInverse(pp, m[i]) * pp;
    }
    return result % prod;
}
int main()
{
    fastio
    ll test,sum,a,n,x,k;
    sum=0;
    vecll ra;
    cin>>n>>k;
    For(i,n)
    {
        cin>>a;
        sum+=a;
        ra.push(sum);
    }
    For(i,k)
    {
        cin>>a;
        x = Bsearch(ra,n,a);
        cout<<x+1<<" ";
        if(x==0)
        {
            cout<<a;
        }
        else
        {
            cout<<a-ra[x-1];
        }
        cout br;
    }
    return 0;
}
