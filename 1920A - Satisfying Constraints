#include<bits/stdc++.h>
#include<string.h>
#define ll long long int
#define br <<"\n"
#define no "NO"
#define yes "YES"
#define vecint vector<int>
#define vecll vector<long long int>
#define vecstring vector<string>
#define push push_back
#define decimal(n) cout<<fixed<<setprecision(n);
#define For(i,n) for(int i=0;i<n;i++)
#define Forran(i,n,a) for(int i=n;i<a;i++)
#define Forrevran(i,n,a) for(int i=n-1;i>=a;i--)
#define Forrev(i,n) for(int i = n-1; i >= 0; i--)
#define total(v) accumulate(v.begin(),v.end(),0)
#define diff(ax,ay,bx,by) abs(ax-bx)+abs(ay-by)
#define oneinbin(x) __builtin_popcount(x)
#define distance(ax,ay,bx,by) pow((ax-bx)*(ax-bx)+(ay-by)*(ay-by),0.5)
#define fastio ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
using namespace std;
bool descending(int x, int y)
{
    return x > y;
}
bool compare(pair<ll,ll>&a,pair<ll,ll>&b)
{
    return (a.first>b.first) || (a.first==b.first && a.second<b.second);
}
bool vecfind(vector<ll>ra,ll x)
{
    if(find(ra.begin(),ra.end(),x)!=ra.end())
    {
        return true;
    }
    else
    {
        return false;
    }
}
ll Bsearch()
{
    ll ans,l=0,r,mid;
    while(l<=r)
    {
        mid=l+(r-l)/2;
        if(1)
        {
            l=mid+1;
            ans = mid;
        }
        else
        {
            r=mid-1;
        }
    }
    return ans;
}
vecll primes;
const ll N = 90000001;
bool is_prime[N];
void sieve()
{
    for (ll i = 3; i * i <= N; i+=2)
    {
        if (is_prime[i]==0)
        {
            for (ll j = i * i; j <= N; j += 2*i)
                is_prime[j] = 1;
        }
    }
    primes.push(2);
    for(ll j = 3 ; j<=N ;j+=2)
    {
        if(is_prime[j]==0)
        {
            primes.push(j);
        }
    }
}
int main()
{
    fastio
    ll test,n,a,k,maxx,minn;
    for(cin>>test;test--;)
    {
        maxx=LONG_MAX;
        minn=0;
        vector<ll>st;
        map<ll,ll>mp;
        cin>>n;
        For(i,n)
        {
            cin>>k>>a;
            if(k==1)
            {
                minn=max(minn,a);
            }
            if(k==2)
            {
                maxx=min(maxx,a);
            }
            else if(!mp[a] && k==3)
            {
                st.push(a);
                mp[a]++;
            }
        }
        sort(st.begin(),st.end());
        if(maxx<minn)
        {
            cout<<0 br;
            continue;
        }
        else if(maxx==minn)
        {
            if(mp[maxx])
            {
                cout<<0 br;
            }
            else
            {
                cout<<1 br;
            }
            continue;
        }
        //cout<<maxx<<" "<<minn br;
        cout<<maxx-minn+1-(lower_bound(st.begin(),st.end(),maxx+1)-lower_bound(st.begin(),st.end(),minn)) br;
    }
    return 0;
}
